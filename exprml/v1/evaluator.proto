syntax = "proto3";

package exprml.v1;

import "exprml/v1/expr.proto";
import "exprml/v1/value.proto";

// Evaluator interface evaluates an expression.
service Evaluator {
  // EvaluateExpr evaluates an expression.
  rpc Evaluate(EvaluateInput) returns (EvaluateOutput) {}
}

// FunDefList is a list of function definitions.
message DefStack {
  // Parent definition list.
  DefStack parent = 1;
  // Definition.
  Eval.Definition def = 2;
}

// EvaluateInput is the input message for the EvaluateExpr method.
message EvaluateInput {
  // Function definition stack.
  DefStack def_stack = 1;
  // Expression to evaluate.
  Expr expr = 2;
}

// EvaluateOutput is the output message for the EvaluateExpr method.
message EvaluateOutput {
  // Status of the evaluation.
  enum Status {
    // Evaluation was successful.
    OK = 0;
    // Index is invalid.
    INVALID_INDEX = 100;
    // Key is invalid.
    INVALID_KEY = 101;
    // Type is unexpected.
    UNEXPECTED_TYPE = 102;
    // Argument mismatch.
    ARGUMENT_MISMATCH = 103;
    // Cases are not exhaustive.
    CASES_NOT_EXHAUSTIVE = 104;
    // Reference not found.
    REFERENCE_NOT_FOUND = 105;
    // Values are not comparable.
    NOT_COMPARABLE = 106;
    // Not a finite number.
    NOT_FINITE_NUMBER = 107;
    // Evaluation was aborted.
    ABORTED = 108;
    // Unknown error.
    UNKNOWN_ERROR = 109;
  }
  // Status of the evaluation.
  Status status = 1;
  // Error message if status is not OK.
  string error_message = 2;
  // Error path if status is not OK.
  Expr.Path error_path = 3;
  // Result of the evaluation.
  Value value = 4;
}
